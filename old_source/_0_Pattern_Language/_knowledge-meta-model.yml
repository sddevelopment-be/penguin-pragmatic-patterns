workspace "PragmaticPenguinPatterns: meta-cognition model for knowlege sharing" "Systems-based meta-model of knowledge exchange" {

  !identifiers hierarchical

  model {

    socialSystem = softwareSystem "Social" "a patterned network of relationships constituting a coherent whole that exist between individuals, groups, and institutions" "people" {

    }

    experimentSystem = softwareSystem "Experimental" "a system in which actions take place and observations are made" "science" {

      process = container "process" "" {
        result = component "Result" "the change occuring to a system after an action has been performed" {

        }

        action = component "Action" "a behavior caused by an agent in a particular situation" {
            -> result "influences" "" "domain"
        }

        objective = component "Objective" "the object of one's endeavours; the intended change to be achieved. aka. 'goal', 'aim', 'target', 'expectation'" {
            -> action "instigates" "" "domain"
        }
      }

      entities = container "entities" "" {
        agent = component "Agent" "something that produces or is capable of producing an effect : an active or efficient cause"
        resource = component "Resource" "a source of supply or support : an available means "
        subject = component "Subject" "the entity whereupon change can be induced"

        resource -> agent "is available to" "" "domain"
        agent -> subject "acts upon" "" "domain"
      }

      drivers = container "drivers" "" {
        motivation = component "Motivation" "initiates, guides, and maintains goal-oriented behaviors" {
        }
        valuation = component "Valuation" "the estimated or determined percieved desirability of a thing, person, conviction, or situation" {
            -> motivation "leads to"

        }

      }


      inspection = container "inspection" "" {
        observation = component "Observation" "perceiving something, such as a phenomenon, often by means of an instrument, and making a record of the resulting information" {
            -> process.result "interpretation of" "" "domain"
            -> entities "performed on"
        }
        assessment = component "Assessment" "to evaluate the worth, significance, or status of" {
            -> observation "based on data from" "" "domain"
        }
      }


    drivers.motivation -> process.objective "reason for" ""
    drivers.valuation -> entities "based on perception of" ""

    process -> entities "induces potential change in"

    process.objective -> inspection.assessment "is reference for"
    inspection.assessment -> drivers.valuation "input for"

    inspection.observation -> entities.agent "perfomed on" "" "domain"
    inspection.observation -> entities.resource "perfomed on" "" "domain"
    inspection.observation -> entities.subject "perfomed on" "" "domain"

    entities.agent -> process.action "performs" "" "domain"
    entities.resource -> process.action "facilitates" "" "domain"


    }

    beliefSystem = softwareSystem "Beliefs" "a rule-based system used to reason, structure, and abstract" "mind" {

      knowledge = container "Knowledge" "A body of useful knowledge" {
        nugget = component "Nugget" "A personal synthesized strategy of dealing with a certain situation"
      }
      subject = container "Subject Matter" "Someone or something" {

      }
      context = container "Contextual Boundary" "Situational, historical, or cognitive boundary" {

      }
      evidence = container "Evidence" "A piece of information" {

      }

      knowledge -> context "Is useful in"
      knowledge -> subject "is a familiarity, awareness, or understanding of"
      evidence -> knowledge "validates or refines"
      evidence -> subject "can be related to"
      evidence -> context "is acquired within"
    }

    linguisticSystem = softwareSystem "Linguistic" "A system of signs governed by grammatical rules of combination to communicate meaning" "communication" {
      spl = container "Pattern Language" "an organized and coherent set of patterns" {

      }
      ontology = container "Information Ontology" "a formal, explicit specification of a shared conceptualization" {

      }
      communication = container "Communication" "a wide range of different behaviors involved in the propagation of information" {
          message = component "Message" "a discrete unit of communication"
      }
      representation = container "Representation" "anything that represents, such as a verbal or pictorial portrait" {
        visualisation = component "Visualisation" "any technique for creating images, diagrams, or animations"

      }

      ontology -> spl "provides terminology for"
      spl -> communication "facilitates"
      spl -> representation "is expressed as"
      communication.message -> representation "uses"

    }

    aggregator = person "Knowledge Agregator" "An agent synthesising nuggets from disjointed observations."

    deploymentEnvironment "cognitive network" {
        private = deploymentNode "Private" {
          credo = softwareSystemInstance beliefSystem
        }

        shared = deploymentNode "Shared" {
          paradigm = softwareSystemInstance beliefSystem
        }

        private -> shared "influences"
        shared -> private "influences"
    }

    aggregator -> linguisticSystem "formulates thoughts using"
    aggregator -> beliefSystem "lives, operates, and thinks based on a personal"
    aggregator -> experimentSystem "operates as an actor within"
    aggregator -> socialSystem "is part of one or more"

    socialSystem -> linguisticSystem "maintains an (often specialized) specific" [systemInt]
    socialSystem -> beliefSystem "provides a baseline" [systemInt]
    socialSystem -> experimentSystem "imposes constraints on" [systemInt]

    experimentSystem -> beliefSystem "validates or disproves" [systemInt]

    beliefSystem.evidence -> experimentSystem.inspection.observation "originates from"
    beliefSystem.knowledge -> linguisticSystem.representation "is expressed using"

    linguisticSystem.communication -> beliefsystem.evidence "exchanges" "" "domain"


    socialSystem -> beliefSystem.context ->  "has a common"
    beliefSystem.knowledge -> socialSystem "is shared within"

  }

  views {

    systemLandscape "KnowledgeAggregationLandscape" "Landscape of the problem domain of shared understanding" {
      include *
      exclude "socialSystem -> *"
      exclude "experimentSystem -> *"
      exclude "beliefSystem -> *"
      exclude "linguisticSystem -> *"
      autoLayout
    }

    systemLandscape "SystemInteraction" "Landscape of the interaction between the various systems in the Knowledge Aggregation space" {
        include *
        exclude relationship.tag==domain,domain
        exclude "aggregator"
        autoLayout
    }

    container beliefSystem "BeliefDomain" "How an SPL can bring shared understanding." {
      include *
      exclude relationship.tag==domain,domain
      autoLayout lr
    }

    container linguisticSystem "LinguisticDomain" "A simplified meta-model of knowledge." {
      include *
      exclude relationship.tag==domain,domain
      autoLayout lr
    }

    container experimentSystem "ProcessDomain" "A simplified meta-model of observable reality." {
      include *
      exclude relationship.tag==domain,domain
      autoLayout lr
    }

    component experimentSystem.process {
      include *
      autoLayout
    }
    component experimentSystem.inspection {
      include *
      autoLayout
    }
    component experimentSystem.entities {
      include *
      autoLayout
    }
    component experimentSystem.drivers {
      include *
      autoLayout
    }

    container socialSystem "SocialDomain" "A simplified meta-model of social groups." {
      include *
      autoLayout
    }

    deployment * "cognitive network" "Influence" "" {
        include *
        exclude relationship.tag==domain,domain
        autolayout
    }


    styles {

      element "Software System" {
        background #1168bd
        color #ffffff
      }

      element "mind" {
            icon "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5/brain.png"
      }

      element "people" {
            icon "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5/people_arrows.png"
      }

      element "science" {
            icon "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5/microscope.png"
      }

      element "communication" {
            icon "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5/comments.png"
      }

      element "Person" {
        shape person
        background #08427b
        color #ffffff
      }

      relationship "domain" {
        routing Curved
      }

    }

    terminology {
      enterprise Business Unit
      person actor
      softwareSystem System
      container Concept
      component Specification
      deploymentNode Context
      relationship Relationship
    }
  }
}
